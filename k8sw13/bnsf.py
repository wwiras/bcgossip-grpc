import json
import os
import numpy as np
import argparse


class BNSF:
    def __init__(self, filepath, num_clusters):
        """
        Initializes a Node object with data from a JSON file and the desired number of clusters.

        Args:
          filepath: The path to the JSON file.
          num_clusters: The desired number of clusters.
        """
        with open(filepath, 'r') as f:
            self.data = json.load(f)
        self.num_clusters = num_clusters
        self.nodes = self.data['nodes']
        self.links = self.data['links']
        # self.clusters = self.apply_agglomerative_clustering()

    # def apply_agglomerative_clustering(self):
    #     """
    #     Applies agglomerative clustering to the network.
    #     Returns:
    #       A list of clusters, where each cluster is a list of node IDs.
    #     """
    #
    #     # 1. Create the distance matrix
    #     num_nodes = len(self.nodes)
    #     distance_matrix = np.zeros((num_nodes, num_nodes))
    #     for i in range(num_nodes):
    #         for j in range(i + 1, num_nodes):
    #             source_id = self.nodes[i]['id']
    #             target_id = self.nodes[j]['id']
    #             latency = next((link['latency'] for link in self.links if
    #                             (link['source'] == source_id and link['target'] == target_id) or (
    #                                         link['source'] == target_id and link['target'] == source_id)), np.inf)
    #             distance_matrix[i, j] = distance_matrix[j, i] = latency
    #
    #     # 2. Initialize clusters with each node as a separate cluster
    #     clusters = [[node['id']] for node in self.nodes]
    #
    #     # 3. Merge clusters iteratively
    #     while self.num_clusters < len(clusters):
    #         # Find the pair of clusters with minimum distance (complete linkage)
    #         min_dist = np.inf
    #         ci_index, cj_index = None, None
    #         for i in range(len(clusters)):
    #             for j in range(i + 1, len(clusters)):
    #                 dist = max(distance_matrix[n1][n2] for n1 in clusters[i] for n2 in clusters[j])
    #                 if dist < min_dist:
    #                     min_dist = dist
    #                     ci_index, cj_index = i, j
    #
    #         # Merge the closest clusters
    #         cnew = clusters[ci_index] + clusters[cj_index]
    #
    #         # Update the cluster set
    #         del clusters[max(ci_index, cj_index)]
    #         del clusters[min(ci_index, cj_index)]
    #         clusters.append(cnew)
    #
    #         # Update the distance matrix
    #         new_distances = []
    #         for i in range(len(clusters) - 1):
    #             dist = max(distance_matrix[n1][n2] for n1 in clusters[i] for n2 in clusters[-1])
    #             new_distances.append(dist)
    #         distance_matrix = np.concatenate((distance_matrix[:-1], [new_distances]), axis=0)
    #         distance_matrix = np.concatenate((distance_matrix[:, :-1], np.array([new_distances]).T), axis=1)
    #
    #     return clusters

    def get_total_nodes(self):
        """
        Returns the total number of nodes in the network.
        """
        return len(self.data['nodes'])

    def get_set_of_nodes(self):
        """
        Returns a set of node IDs in the network.
        """
        return {node['id'] for node in self.data['nodes']}

    # def get_clusters(self):
    #     """
    #     Returns the clusters generated by agglomerative clustering.
    #     """
    #     return self.clusters


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Perform BNSF on network nodes.')
    parser.add_argument('--num_clusters',required=True, type=int, help='Desired number of clusters.')
    args = parser.parse_args()

    # parser = argparse.ArgumentParser(description="Send a message to self (the current pod).")
    # parser.add_argument('--message', required=True, help="Message to send")
    # args = parser.parse_args()

    # Construct the full file path
    filepath = os.path.join('topology', 'nt_nodes10_RM.json')
    bnsfobj = BNSF(filepath, args.num_clusters)

    total_nodes = bnsfobj.get_total_nodes()
    print(f"Total number of nodes: {total_nodes}")

    set_of_nodes = bnsfobj.get_set_of_nodes()
    print(f"Set of nodes: {set_of_nodes}")

    # clusters = bnsfobj.get_clusters()
    # print(f"Clusters: {clusters}")

