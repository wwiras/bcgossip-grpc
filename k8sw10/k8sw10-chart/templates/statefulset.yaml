apiVersion: apps/v1
kind: StatefulSet
{{- $topology := .Files.Get "topology.json" | fromJson }}

{{ print "$topology:" $topology }}
{{- $statefulsets := dict }}
{{- range $node := $topology.nodes }}
{{- $podName := $node.id }}
{{- $egressBandwidth := $node.bandwidth }}
{{- if not (hasKey $statefulsets $egressBandwidth) }}
{{- $_ := set $statefulsets $egressBandwidth (list) }}
{{- end }}
{{- $statefulsets = set $statefulsets $egressBandwidth (append (index $statefulsets $egressBandwidth) (dict "podName" $podName "egressBandwidth" $egressBandwidth)) }}
{{- end }}

{{ print "StatefulSets by Bandwidth:" $statefulsets }}

{{- range $egressBandwidth, $pods := $statefulsets }}

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $.Release.Name }}-{{ $egressBandwidth }}
spec:
  serviceName: "bcgossip-svc"
  replicas: {{ len $pods }}
  selector:
    matchLabels:
      app: bcgossip-{{ $egressBandwidth }}
  template:
    metadata:
      labels:
        app: bcgossip-{{ $egressBandwidth }}
        run: bcgossip
      annotations:
        kubernetes.io/egress-bandwidth: {{ $egressBandwidth }}
    spec:
      containers:
        - name: gossip-node
          image: "{{ .Values.image.name }}:{{ .Values.image.tag }}"
          ports:
            - containerPort: 5050
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: BANDWIDTH
              value: {{ $egressBandwidth }}
            - name: NODES
              value: {{ .Values.totalNodes }}
          volumeMounts:
          - name: data
            mountPath: /data
      volumes:
      - name: data
        emptyDir: {}
  podManagementPolicy: Parallel
  {{- range $index, $pod := $pods }}
  - metadata:
      name: {{ $pod.podName }}
  {{- end }}
{{- end }}